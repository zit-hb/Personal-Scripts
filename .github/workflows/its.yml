name: integration tests

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full history for accurate diffs

      - name: Check if commit message includes [skip-ci]
        id: check_skip
        run: |
          # Get the last commit message from the checked out code
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Last commit message: $COMMIT_MESSAGE"
          # If it contains [skip-ci], set skip=true
          if [[ "$COMMIT_MESSAGE" == *"[skip-ci]"* ]]; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Python 3.10
        if: steps.check_skip.outputs.skip == 'false'
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Get list of changed Python files
        if: steps.check_skip.outputs.skip == 'false'
        id: changed_files
        run: |
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
          
          # Determine the base commit depending on the event type
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            BASE_SHA=$(jq -r .pull_request.base.sha "$GITHUB_EVENT_PATH")
          else
            # For push events, use the previous commit
            BASE_SHA=$(git rev-parse HEAD^1)
          fi
          
          echo "Base SHA: $BASE_SHA"
          
          # Get list of changed Python files
          CHANGED_FILES=$(git diff --name-only "$BASE_SHA" HEAD -- '*.py')
          
          echo "Changed Python files:"
          echo "$CHANGED_FILES"
          
          # Export the list as a multiline string
          echo "files<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CHANGED_FILES" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Run the changed scripts
        if: steps.check_skip.outputs.skip == 'false' && steps.changed_files.outputs.files != ''
        run: |
          echo "${{ steps.changed_files.outputs.files }}" | while IFS= read -r file; do
            echo "Running tests for \"$file\""
            python3 Meta/docker.py --test "$file" -v
          done
        shell: bash

      - name: Skip message
        if: steps.check_skip.outputs.skip == 'true'
        run: echo "Skipping tests because [skip-ci] was found in the commit message."
